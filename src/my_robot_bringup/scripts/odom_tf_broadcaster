#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from nav_msgs.msg import Odometry
from geometry_msgs.msg import TransformStamped
from tf2_ros import TransformBroadcaster
import time
from rclpy.time import Time

class OdomTF(Node):
    def __init__(self):
        super().__init__('rf2o_tf_broadcaster')
        self.br = TransformBroadcaster(self)
        # Add a delay to ensure TF tree is established
        time.sleep(3.0)
        
        # Create diagnostic publisher to check if transforms are being sent
        self.seq = 0
        self.latest_tf_time = None
        
        self.create_subscription(
            Odometry, '/odom_rf2o', self.cb, 10)
        self.get_logger().info('TF Broadcaster started - listening to /odom_rf2o')
        
        # Also publish a static identity transform in case we don't get odometry immediately
        self.timer = self.create_timer(1.0, self.publish_static_tf)
    
    def publish_static_tf(self):
        """Publish a static identity transform until we get real odometry"""
        if self.latest_tf_time is None:
            tf = TransformStamped()
            tf.header.stamp = self.get_clock().now().to_msg()
            tf.header.frame_id = 'odom'
            tf.child_frame_id = 'base_link'
            # Identity transform
            tf.transform.translation.x = 0.0
            tf.transform.translation.y = 0.0
            tf.transform.translation.z = 0.0
            tf.transform.rotation.w = 1.0
            tf.transform.rotation.x = 0.0
            tf.transform.rotation.y = 0.0
            tf.transform.rotation.z = 0.0
            self.br.sendTransform(tf)
            self.get_logger().info('Sending static identity transform until odometry arrives')

    def cb(self, msg: Odometry):
        tf = TransformStamped()
        
        # Use current time to avoid timestamp issues
        tf.header.stamp = self.get_clock().now().to_msg()
        tf.header.frame_id = 'odom'
        tf.child_frame_id = 'base_link'
        
        tf.transform.translation.x = msg.pose.pose.position.x
        tf.transform.translation.y = msg.pose.pose.position.y
        tf.transform.translation.z = 0.0
        tf.transform.rotation = msg.pose.pose.orientation
        
        self.br.sendTransform(tf)
        self.latest_tf_time = self.get_clock().now()
        
        self.seq += 1
        if self.seq % 10 == 0:
            self.get_logger().info(f'Sending TF: odomâ†’base_link ({self.seq})')

def main():
    rclpy.init()
    try:
        node = OdomTF()
        rclpy.spin(node)
    except Exception as e:
        print(f"Error in TF broadcaster: {e}")
    finally:
        rclpy.shutdown()

if __name__ == '__main__':
    main()
